# Docs for the Azure Web Apps Deploy action: https://github.com/azure/functions-action
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure Functions: https://aka.ms/python-webapps-actions

name: Build and deploy Python project to Azure Function App - TestPythonMSP

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './function-app'  # set to function-app directory
  PYTHON_VERSION: '3.12'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python version
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Copy shared code and prepare function structure
        run: |
          # Create function directory if it doesn't exist
          mkdir -p ./function-app/msp_sap_integration
          
          # Copy the main processing file
          cp ./shared/msp_sap_integration_fixed.py ./function-app/msp_sap_integration/
          
          # Create function.json with your specific configuration
          echo '{"scriptFile": "__init__.py","bindings": [{"authLevel": "function","type": "httpTrigger","direction": "in","name": "req","methods": [ "get", "post" ]},{"type": "http","direction": "out","name": "$return"}]}' > ./function-app/msp_sap_integration/function.json
          
      - name: Create __init__.py file
        run: |
          echo 'import logging
          import azure.functions as func

          try:
              # Try importing dependencies
              import pandas as pd
              import numpy as np
              from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient
              
              # Import the processing function from the original file name
              from .msp_sap_integration_fixed import main as process_integration
              
              # Flag to indicate if we can run the full process
              CAN_RUN_FULL_PROCESS = True
              logging.info("Successfully imported all dependencies and process_integration")
              
          except ImportError as e:
              logging.error(f"Import error: {str(e)}")
              # Flag to indicate we can run the full process
              CAN_RUN_FULL_PROCESS = False

          def main(req: func.HttpRequest) -> func.HttpResponse:
              logging.info("HTTP trigger received a request.")
              
              # Preserve the existing name parameter functionality
              name = req.params.get("name")
              if not name:
                  try:
                      req_body = req.get_json()
                  except ValueError:
                      req_body = {}
                  name = req_body.get("name")

              # If a name was provided, return the greeting
              if name:
                  return func.HttpResponse(f"Hello, {name}!")
              else:
                  if CAN_RUN_FULL_PROCESS:
                      try:
                          # Run the full process
                          process_integration()
                          return func.HttpResponse(
                              "SAP integration process completed successfully.",
                              status_code=200
                          )
                      except Exception as e:
                          logging.error(f"Error in SAP integration process: {str(e)}")
                          return func.HttpResponse(
                              f"Error during processing: {str(e)}",
                              status_code=500
                          )
                  else:
                      # Return a message about missing dependencies
                      return func.HttpResponse(
                          "Cannot run the full process because required packages are missing. "
                          "Please check the deployment and ensure all requirements are installed.",
                          status_code=500
                      )' > ./function-app/msp_sap_integration/__init__.py
          
      - name: Create host.json if needed
        run: |
          if [ ! -f ./function-app/host.json ]; then
            echo '{"version": "2.0","logging": {"applicationInsights": {"samplingSettings": {"isEnabled": true,"excludedTypes": "Request"}}},"extensionBundle": {"id": "Microsoft.Azure.Functions.ExtensionBundle","version": "[3.*, 4.0.0)"}}' > ./function-app/host.json
          fi
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --target="./function-app/.python_packages/lib/site-packages" -r ./function-app/requirements.txt

      - name: Zip artifact for deployment
        run: |
          cd function-app
          zip -r ../release.zip ./*

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            release.zip
            !venv/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: unzip release.zip     
        
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_E3E799A04CD74F4FB3A80C9986C40262 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_A6A2FF19A3084D6C99C081375ED90332 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_5C075A93C9724AA483937233DB0EBAB8 }}

      - name: 'Deploy to Azure Functions'
        uses: Azure/functions-action@v1
        id: deploy-to-function
        with:
          app-name: 'TestPythonMSP'
          slot-name: 'Production'
          package: '.'  # Deploy from current directory after unzipping